function naiveBayesModel(databaseFile)
    % Carregar os dados
    data = readtable(databaseFile, 'TextType', 'string');
    
    % Extrair títulos e rótulos
    titles = strtrim(string(data.title))';  % Ensure row vector
    domains = data.source_domain';         % Ensure row vector
    labels = categorical(data.real)';      % Ensure row vector
    
    % Verifique o tamanho original dos dados
    disp("Tamanho original de titles, domains e labels:");
    disp(size(titles));  % Exibe o tamanho de titles
    disp(size(domains)); % Exibe o tamanho de domains
    disp(size(labels));  % Exibe o tamanho de labels
    
    % Remover entradas inválidas (NA ou string vazia) nos domínios
    validRows = ~ismissing(domains) & ~ismissing(titles) & domains ~= "" & titles ~= "";
 
    
    % Filtrar títulos, domínios e rótulos juntos
    validRows = validRows;  % Combine domain and title validity checks
    
    % Aplicar o filtro em todos os dados: titles, domains, labels
    titles = titles(validRows);
    domains = domains(validRows);
    labels = labels(validRows);  % Ensure labels are filtered in the same way
    
    % Verifique o tamanho após a remoção de entradas inválidas
    disp("Tamanho após remoção de entradas inválidas (missing ou vazias):");
    disp(size(titles));  % Exibe o tamanho de titles
    disp(size(domains)); % Exibe o tamanho de domains
    disp(size(labels));  % Exibe o tamanho de labels
    
    % Criar bag-of-words para os títulos
    bowTitles = bagOfWords(titles);
    countsTitles = bowTitles.Counts;  % Obter a matriz de contagem
    
    % Verifique as dimensões de countsTitles
    disp("Dimensões de countsTitles:");
    disp(size(countsTitles));  % Exibe o tamanho de countsTitles
    
    % Verifique a quantidade de títulos válidos após a filtragem
    disp("Número de títulos válidos após o filtro:");
    disp(length(titles));  % Exibe o número de títulos
    
    % Certifique-se de que a quantidade de títulos após o bag-of-words corresponde
    % ao número de títulos válidos
    if size(countsTitles, 1) ~= length(titles)
        error('O número de títulos após o bag-of-words não corresponde ao número de títulos válidos!');
    end
    
    % Processar os domínios como uma variável categórica
    uniqueDomains = unique(domains);  % Get unique domains
    domainFeatures = zeros(length(titles), length(uniqueDomains));  % Initialize domain feature matrix
    
    % Criar a matriz de características de domínios
    for i = 1:length(titles)
        domainIdx = strcmp(uniqueDomains, domains(i));  % Find the index of the domain
        domainFeatures(i, domainIdx) = 1;  % Set the corresponding domain column to 1
    end
    
    % Verifique as dimensões após a criação das características de domínio
    disp("Dimensões de domainFeatures:");
    disp(size(domainFeatures));  % Exibe o tamanho de domainFeatures
    
    % Concatenar todas as características
    % Certifique-se de que countsTitles e domainFeatures tenham o mesmo número de linhas
    if size(countsTitles, 1) ~= size(domainFeatures, 1)
        error('Número de títulos e domínios não coincidem!');
    end
    
    % Concatenar as contagens de palavras e as características de domínio
    % Convert domainFeatures to a sparse matrix for compatibility with countsTitles
    domainFeaturesSparse = sparse(domainFeatures);
    
    % Concatenate the word counts (sparse) and domain features (dense converted to sparse)
    features = [countsTitles, domainFeaturesSparse];
    
    % Verifique as dimensões da matriz final de características
    disp("Dimensões de features:");
    disp(size(features));  % Exibe o tamanho de features
    
    % Treinar o modelo Naïve Bayes
    mdl = fitcnb(features, labels);
    
    % Salvar o modelo treinado
    save('naiveBayesModel.mat', 'mdl');
    disp('Modelo treinado e salvo.');
end
