function FamoustitlesWithBloomFilter(databaseFile)
    % Processa um arquivo para identificar quais são as noticias mais famosas

    data = readtable(databaseFile, 'TextType', 'string');
    bf = createBloomFilter(10000); 
    
    % Iterar sobre os dados
    for i = 1:height(data)
        % Verificar valores ausentes
        if ismissing(data.title(i))
            fprintf('Artigo inválido: Dados ausentes\n');
            continue;
        end
        
        % Criar uma chave única para o artigo (combinação de título e tweet)
        key = strcat(data.title(i), data.tweet_num(i));
        
        % Adicionar ao Bloom Filter
        try
            [bf, isFamous] = addToBloomFilter(bf, key);
        catch ME
            fprintf('Erro ao processar chave "%s": %s\n', key, ME.message);
            continue;
        end
        
        % Exibir resultados
        if ~isFamous
            fprintf('Artigo famoso: %s\n', data.title(i));
        else
            fprintf('Artigo sem fama: %s\n', data.title(i));
        end
    end
end

function bf = createBloomFilter(size)
    % Cria um vetor lógico para simular o Bloom Filter
    bf = false(1, size);
end

function [bf, isFamous] = addToBloomFilter(bf, articleKey)
    % Adiciona uma chave ao Bloom Filter e verifica se é famoso
    
    % Usa função hash robusta (DataHash ou hash simples ajustado)
    hashValue = robustHash(articleKey);
    
    % Calcula o índice usando o valor hash e mod
    index = mod(hashValue, length(bf)) + 1;  % Garantir índice no intervalo [1, length(bf)]
    
    % Verifica se o índice já estava marcado
    isFamous = data.;
    
    % Marca o índice no Bloom Filter
    bf(index) = true;
end

function hashValue = robustHash(inputString)
    % Função hash robusta que transforma a string em um valor numérico consistente
    hashValue = sum(double(inputString)) * 31; % (Ajustar) o multiplicador para maior dispersão
end
