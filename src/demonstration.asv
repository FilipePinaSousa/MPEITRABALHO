% Teste de Similaridade de Artigos (test_minHash.m)
function test_minHash()
    % Carregar o dataset
    data = readtable('FakeNewsNet.csv', 'TextType', 'string');
    
    disp('Testando Similaridade entre Artigos:');
    
    % Escolhendo dois títulos de artigos do dataset para comparação
    title1 = data.title(1);  % Pega o título do primeiro artigo
    title2 = data.title(2);  % Pega o título do segundo artigo
    
    % Calculando a similaridade entre os dois títulos
    similarity = calculateSimilarity(title1, title2);  % Chama a função de similaridade
    
    % Imprime o resultado da similaridade
    fprintf('Similaridade entre os títulos: %d\n', similarity);
end

% Teste de Filtro Bloom
function test_bloomFilter()
    data = readtable('FakeNewsNet.csv', 'TextType', 'string');
    
    disp('Testando Filtro Bloom:');
    bf = createBloomFilter(1000);  % Criar filtro Bloom com 1000 slots
    hashFunc = @(x) simpleHash(x);  % Função de hash simples
    
    % Iterar sobre os artigos e testar duplicação
    for i = 1:height(data)
        key = strcat(data.title(i), data.news_url(i));  % Combinação de título e URL
        [bf, isNew] = addToBloomFilter(bf, key, hashFunc);
        
        if ~isNew
            fprintf('Artigo duplicado: %s\n', data.title(i));
        else
            fprintf('Artigo único: %s\n', data.title(i));
        end
    end
end

% Teste de Classificação de Artigos (Naïve Bayes)
function test_classifyArticle()
    data = readtable('FakeNewsNet.csv', 'TextType', 'string');
    
    disp('Testando Classificação de Artigos:');
    
    % Simulando a classificação dos primeiros 5 artigos no dataset
    for i = 1:5
        title = data.title(i);  % Pega o título do artigo
        result = classifyArticle(title);  % Chama o módulo de classificação
        fprintf('Título: %s -> Classificação: %d\n', title, result);  % 1 é real, 0 é fake
    end
end

% Rodar todos os testes
test_bloomFilter();
test_classifyArticle();
test_minHash();
