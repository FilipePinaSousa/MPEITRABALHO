function findSimilarTitlesMinHash(databaseFile)
    data = readtable(databaseFile, 'TextType', 'string');
    titles = data.title;

    % MinHash parameters
    numHashes = 200;
    shinglesSize = 2;
    similarityThreshold = 0.1;

    % Generate signatures matrix
    numTitles = height(data);
    signatures = inf(numTitles, numHashes);

    % Process each title
    for i = 1:numTitles
        title = data.title;
        shingles = generateShingles(title, shinglesSize);
        fprintf('Title %d shingles: %s\n', i, strjoin(string(shingles), ', ')); % Convert to string if needed

        signatures(i, :) = computeMinHashSignature(shingles, numHashes);
        fprintf('Title %d MinHash signature: %s\n', i, mat2str(signatures(i, :)));
    end

    % Lê o título de entrada do usuário
    userTitle = input('Enter title to check: ', 's');
    userTitle = preprocessTitle(userTitle);
    userShingles = generateShingles(userTitle, shinglesSize);
    fprintf('User shingles: %s\n', strjoin(userShingles, ', '));
    userSignature = computeMinHashSignature(userShingles, numHashes);
    fprintf('User MinHash signature: %s\n', mat2str(userSignature));

    % Calculate Jaccard similarity using MinHash signatures
    similarities = zeros(numTitles, 1);
    for i = 1:numTitles
        similarities(i) = computeMinHashSimilarity(userSignature, signatures(i, :));
        fprintf('Title %d similarity: %.2f with "%s"\n', i, similarities(i), titles(i));
    end

    % Sort and display results
    [sortedSim, indices] = sort(similarities, 'descend');
    fprintf('Top results sorted:\n');
    for i = 1:length(sortedSim)
        fprintf('Index %d - Similarity: %.2f\n', indices(i), sortedSim(i));
    end
    displaySimilarTitles(data, sortedSim, indices, similarityThreshold);
end

function similarity = computeMinHashSimilarity(sig1, sig2)
    % Calculate the fraction of matching hash values
    similarity = sum(sig1 == sig2) / length(sig1);
    fprintf('Computed similarity: %.4f\n', similarity); 
end

function title = preprocessTitle(title)
    % Convert to lowercase and remove non-alphanumeric characters
    title = lower(title);
    title = regexprep(title, '[^\\w\\s]', '');
end

function shingles = generateShingles(text, k)
    % Generate k-shingles from the input text
    shingles = {}; % Ensure this is a cell array
    words = strsplit(text);
    if length(words) >= k
        for i = 1:(length(words) - k + 1)
            shingle = strjoin(words(i:i+k-1), ' ');
            shingles{end+1} = shingle; %#ok<AGROW>
        end
    else
        shingles{1} = strjoin(words, ' ');
    end
end


function signature = computeMinHashSignature(shingles, numHashes)
    % Compute the MinHash signature for a set of shingles
    signature = inf(1, numHashes);
    for i = 1:numHashes
        for j = 1:length(shingles)
            hashValue = string2hash(shingles{j}, 'djb2', i);
            signature(i) = min(signature(i), hashValue);
        end
    end
    fprintf('Computed MinHash signature: %s\n', mat2str(signature));
end

function displaySimilarTitles(data, similarities, indices, threshold)
    % Display titles similar to the user input
    fprintf('\nSimilar titles found:\n');
    numResults = 0;
    for i = 1:length(indices)
        if similarities(i) >= threshold
            fprintf('%.2f%% similar: %s\n', ...
                similarities(i) * 100, ...
                data.title(indices(i)));
            numResults = numResults + 1;
        end
        if numResults >= 5
            break;
        end
    end
end
